<!-- Generated by LibHtt 2003-10-22 22:45:35 
  Templet source: /data0/chinaunix.net/cgisrc/do_html/viewtopics_jh.html
  Warnings and errors: 0
-->
<html>
<head>
<TITLE>ChinaUnix.net - Singleton 模式 在 Java 中的应用</TITLE>
<META http-equiv=Content-Type content="text/html; charset=gb2312">
<META NAME ="keywords" CONTENT="Linux,Freebsd,Solaris,Sco,HP-UX,IBM-AIX,cisco,oracle,java,cgi,mysql,perl,Apache,proFTP,Sendmail,Qmail,DNS,Squid,Rsync,SSL"> 
<META NAME="description" CONTENT="中国UNIX技术社区">
<style type="text/css">
<!--
body,th,input,select,textarea,select,checkbox{font:12pt 宋体}
body {  font-family: "宋体", "serif"; font-size: 12pt}
td {  font-family: "宋体", "serif"; font-size: 12pt}
p  { font-size: 9pt; line-height: 150%}
-->
</style>

</head>

<body>
<div align="center"><center>

<table border="0" width=75%  cellspacing="0" cellpadding="0" >
<tr>
  <td height="45"><p align="center"><a href=http://www.chinaunix.net><img src="http://www.chinaunix.net/bbs/myimages/logo.gif" border=0 alt="ChinaUnix.net"></a>&nbsp;&nbsp;<b>CU-Java/JSP讨论区精华帖 &nbsp;&nbsp;</b></td>
  </tr> 
<tr>
<tr>
 <td align=left height="40" valign=bottom align=left><small>
<a href="http://www.chinaunix.net">ChinaUnix.net</a> > 
<a href=http://www.chinaunix.net/forum>论坛首页</a> > 
<a href=http://www.chinaunix.net/jh>精华首页</a> > 
<a href=http://www.chinaunix.net/jh/26>Java/JSP精华区</a> >
正文
</small></td>
</tr>
<tr>
  <td width="100%" height="2" colspan="5" bgcolor="#49ADE9"><img src="/images/bline.gif" width=1 height=1></td> 
</tr>
</table>
<table border="0" width=75%  cellspacing="0" cellpadding="0">
<tr>
 <td align=center height="40" valign=middle  bgcolor=#EDF0F5><font size=5><b>Singleton 模式 在 Java 中的应用</b></font></td>
</tr>
<tr>
 <td align=center height="20"  bgcolor=#EDF0F5><small>http://www.chinaunix.net 作者:<a href=http://www.chinaunix.net/forum/profile.php?mode=viewprofile&u=6872 target=_blank>cinc</a>&nbsp;&nbsp;发表于：2002-09-04 10:53:07</font></td>
</tr>
<tr>
<td align=center bgcolor=#EDF0F5>
	<table border="0" width="90%"  cellspacing="0" cellpadding="0" align=center style='border-collapse: collapse; WORD-BREAK: break-all'>
	<tr><td valign=top><br>	
	[这个贴子最后由cinc在&nbsp;2002/09/05&nbsp;04:07pm&nbsp;编辑]<br><br>Singleton&nbsp;模式在&nbsp;Java&nbsp;中的应用<br>作者&nbsp;cinc&nbsp;2002-09-04<br><br>程序中经常有这样的要求，整个程序运行时只有一个实例被使用。<br>比如：数据库连接池，系统参数配置，Java&nbsp;API&nbsp;中的&nbsp;Runtime,&nbsp;Calendar&nbsp;...<br>如何实现这种需求成为一个值得讨论的问题。<br><br>以往的做法，是在程序的某个类里面（比如是&nbsp;GlobalObject&nbsp;）建立一个这个此种类的实例，然后规定<br>所有需要用到此类的，都从&nbsp;GlobalObject&nbsp;那里获得，看下面的例子：<br><br>public&nbsp;class&nbsp;ConnectionPoolManager&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;ConnectionPoolManager&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;do&nbsp;some&nbsp;initialize&nbsp;work<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;Connection&nbsp;getConnection(){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;....<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br><br>public&nbsp;class&nbsp;GlobalObject&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;ConnectionPoolManager&nbsp;connectionPoolManager&#59;<br>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;GlobalObject&nbsp;()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;connectionPoolManager&nbsp;=&nbsp;new&nbsp;ConnectionPoolManager()&#59;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;getConnectionPoolManager()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;connectionPoolManager&#59;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br><br>public&nbsp;class&nbsp;QueryFunctions&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;Collection&nbsp;findStudentByName(String&nbsp;name){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ConnectionPoolManager&nbsp;=&nbsp;globalObject.getConnectionPoolManager()&#59;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Connection&nbsp;connection&nbsp;=&nbsp;connectionPoolManager.getConnection()&#59;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;query&nbsp;database<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br><br>但这样做有如下缺点：<br>&nbsp;&nbsp;其他人可能&nbsp;调用&nbsp;ConnectionPoolManager&nbsp;的构造函数自己建立一个&nbsp;数据库连接池，导致<br>&nbsp;&nbsp;程序中存在多个&nbsp;ConnectionPoolManager，人为的规定往往得不到好的实施。<br>&nbsp;&nbsp;GlobalObject&nbsp;其实就是一个&nbsp;C&nbsp;语言中的全局变量，与面向对象的方法相冲突。<br><br><br><br>因此，可以使用&nbsp;设计模式&nbsp;中的&nbsp;Singleton&nbsp;（单件）模式来完成以上的需求：<br>Java&nbsp;API&nbsp;中的&nbsp;Runtime&nbsp;等等用的就是这种方法。<br>代码如下：<br><br>public&nbsp;class&nbsp;ConnectionPoolManager&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;static&nbsp;instance&nbsp;=&nbsp;null&#59;<br>&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;ConnectionPoolManager()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;do&nbsp;some&nbsp;initialize&nbsp;work<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;syncronized&nbsp;void&nbsp;getInstance()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(instance&nbsp;==&nbsp;null){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;instance&nbsp;=&nbsp;new&nbsp;ConnectionPoolManager()&#59;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;instance&#59;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;Connection&nbsp;getConnection(){<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br><br>ConnectionPoolManager&nbsp;的使用<br><br>public&nbsp;class&nbsp;QueryFunctions&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;Collection&nbsp;findStudentByName(String&nbsp;name){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ConnectPoolManager&nbsp;connectionPoolManager&nbsp;=&nbsp;ConnectionPoolManager.getInstance()&#59;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Connection&nbsp;conn&nbsp;=&nbsp;connectionPoolManager.getConnection()&#59;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;query&nbsp;database<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br><br>1.instance&nbsp;是私有的，开始时赋值为&nbsp;null，外部只有通过&nbsp;getInstance&nbsp;方法才能获得他。<br>2.构造方法是私有的，这点很重要，保证只有这个类自己才能够调用，其他的类无法调用此构造函数。<br>3.getInstance&nbsp;方法中：<br>&nbsp;&nbsp;&nbsp;if&nbsp;语句，保证只有一个&nbsp;instance&nbsp;存在<br>&nbsp;&nbsp;&nbsp;唯一的一个&nbsp;ConnectionPoolManager&nbsp;在第一次调用的时候被建立。<br><br><br>Java语言在设计的时候就使用了很多&nbsp;设计模式的思想，像&nbsp;Collection&nbsp;中的&nbsp;Iterator&nbsp;模式，<br>Event&nbsp;中的&nbsp;Observer&nbsp;模式，Applet&nbsp;中的&nbsp;Templete&nbsp;模式，对象创建时的&nbsp;Factory&nbsp;模式，这些<br>模式大多可以从&nbsp;Java&nbsp;的类的命名中体现出来，希望大家在学习&nbsp;Java&nbsp;时多注意对&nbsp;设计模式&nbsp;的学习。<br><br>参考：<br>&nbsp;&nbsp;设计模式：可复用面向对象软件的基础&nbsp;(Gang&nbsp;of&nbsp;Four&nbsp;的&nbsp;Design&nbsp;Pattern&nbsp;经典)&nbsp;<br>&nbsp;&nbsp;Thinking&nbsp;in&nbsp;Pattern&nbsp;:&nbsp;&nbsp;http://www.mindview.net/Books/TIPatterns/&nbsp;还是&nbsp;Bruce&nbsp;Eckel&nbsp;写的。<br>&nbsp;&nbsp;Design&nbsp;Pattern&nbsp;Java&nbsp;:&nbsp;ftp://cinc.dns2go.com/pub/doc/pattern/java/<br><br><br>
	<br>
	</td></tr>
	</table>
</td>
</tr>
<tr><td align=center>
<small>【<a href=http://www.chinaunix.net/forum/posting.php?mode=reply&t=15960>发表回复</a>】【<a href=http://www.chinaunix.net/forum/viewtopic.php?t=15960>查看CU论坛原帖</a>】【<a href="javascript:window.close()">关闭</a>】</small>
</td></tr>

</table>
<!-----------回复----------->
<table border="0" width=75%  cellspacing="0" cellpadding="0" >
<tr><td bgcolor=#EDF0F5>
	<table border="0" width=90% cellspacing="0" cellpadding="0" align=center style='border-collapse: collapse; WORD-BREAK: break-all'>
	<tr><td ><hr><small>&nbsp;<a href=http://www.chinaunix.net/forum/profile.php?mode=viewprofile&u=180 target=_blank>mygod</a> 回复于：2002-09-04 10:58:23</small></td></tr>
<tr><td>斑竹你的程序有点问题，定义的时候应当定义成静态的，否则没法判断是否已经存在！<br>不过，还是一个很好的帖子，建议加为精品<br><br></td></tr>
<tr><td ><hr><small>&nbsp;<a href=http://www.chinaunix.net/forum/profile.php?mode=viewprofile&u=180 target=_blank>mygod</a> 回复于：2002-09-04 10:59:41</small></td></tr>
<tr><td>呵呵，看错了，没错！<br><br></td></tr>
<tr><td ><hr><small>&nbsp;<a href=http://www.chinaunix.net/forum/profile.php?mode=viewprofile&u=6872 target=_blank>cinc</a> 回复于：2002-09-04 11:06:35</small></td></tr>
<tr><td>mygod&nbsp;,&nbsp;你说的是哪个要定义成&nbsp;静态&nbsp;的啊，能说的具体点吗？呵呵<br><br>我刚看了&nbsp;Runtime&nbsp;的实现如下：<br><br>public&nbsp;class&nbsp;Runtime&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;static&nbsp;Runtime&nbsp;currentRuntime&nbsp;=&nbsp;new&nbsp;Runtime()&#59;<br>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;Runtime&nbsp;getRuntime()&nbsp;{&nbsp;<br>return&nbsp;currentRuntime&#59;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;/**&nbsp;Don't&nbsp;let&nbsp;anyone&nbsp;else&nbsp;instantiate&nbsp;this&nbsp;class&nbsp;*/<br>&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;够狠<br>&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;Runtime()&nbsp;{}<br>}<br><br><br><br></td></tr>
<tr><td ><hr><small>&nbsp;<a href=http://www.chinaunix.net/forum/profile.php?mode=viewprofile&u=6872 target=_blank>cinc</a> 回复于：2002-09-04 11:07:13</small></td></tr>
<tr><td>呵呵，那就好。<br><br></td></tr>
<tr><td ><hr><small>&nbsp;<a href=http://www.chinaunix.net/forum/profile.php?mode=viewprofile&u=6872 target=_blank>cinc</a> 回复于：2002-09-05 15:56:37</small></td></tr>
<tr><td>[这个贴子最后由cinc在&nbsp;2002/09/05&nbsp;04:08pm&nbsp;编辑]<br><br>上面有个错误，是关于同步的，上面的帖子我已经修改过乐，下面是原来的代码：<br><br>public&nbsp;class&nbsp;MySingleton&nbsp;{&nbsp;&nbsp;<br>&nbsp;&nbsp;private&nbsp;static&nbsp;&nbsp;MySingleton&nbsp;_instance&#59;&nbsp;&nbsp;<br><br>&nbsp;&nbsp;public&nbsp;static&nbsp;MySingleton&nbsp;getInstance()&nbsp;{&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(_instance==null)&nbsp;{&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_instance&nbsp;=&nbsp;new&nbsp;MySingleton()&#59;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;_instance&#59;&nbsp;&nbsp;<br>&nbsp;&nbsp;}&nbsp;&nbsp;<br><br>对于这种&nbsp;惰性初始化，initial&nbsp;on&nbsp;first&nbsp;demand.&nbsp;<br>由于创建&nbsp;_instance&nbsp;的过程不是原子操作，在&nbsp;_instance&nbsp;完全初始化之前，可能会有被&nbsp;<br>其他的线程读取，从而得到一个没有完全初始化的对象，造成灾难性的后果。&nbsp;<br><br>解决方法是把&nbsp;<br>&nbsp;&nbsp;public&nbsp;static&nbsp;MySingleton&nbsp;getInstance()&nbsp;{&nbsp;&nbsp;<br>修改成&nbsp;<br>&nbsp;&nbsp;public&nbsp;static&nbsp;syncronized&nbsp;MySingleton&nbsp;getInstance()&nbsp;{&nbsp;&nbsp;<br>在对象创建过程时&nbsp;不允许其他线程访问&nbsp;_instance&nbsp;<br><br>但&nbsp;Java&nbsp;推荐的方法是放弃这种&nbsp;惰性初始化，而使用如下的方法：&nbsp;<br>这样也减少了同步的开销，也去除了每次对&nbsp;_instance&nbsp;的检查。&nbsp;<br><br>public&nbsp;class&nbsp;MySingleton&nbsp;{&nbsp;&nbsp;<br>&nbsp;&nbsp;private&nbsp;static&nbsp;&nbsp;MySingleton&nbsp;_instance&nbsp;=&nbsp;new&nbsp;MySingleton()&#59;&nbsp;&nbsp;<br><br>&nbsp;&nbsp;private&nbsp;MySingleton()&nbsp;{&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;construct&nbsp;object&nbsp;.&nbsp;.&nbsp;.&nbsp;&nbsp;<br>&nbsp;&nbsp;}&nbsp;&nbsp;<br><br>&nbsp;&nbsp;public&nbsp;static&nbsp;MySingleton&nbsp;getInstance()&nbsp;{&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;_instance&#59;&nbsp;&nbsp;<br>&nbsp;&nbsp;}&nbsp;&nbsp;<br><br>参考：《Java&nbsp;高效编程指南》。&nbsp;<br><br><br><br></td></tr>
<tr><td ><hr><small>&nbsp;<a href=http://www.chinaunix.net/forum/profile.php?mode=viewprofile&u=18970 target=_blank>victorachc</a> 回复于：2002-09-10 11:54:37</small></td></tr>
<tr><td>public&nbsp;class&nbsp;MySingleton&nbsp;{&nbsp;&nbsp;<br>&nbsp;private&nbsp;static&nbsp;&nbsp;MySingleton&nbsp;_instance&nbsp;=&nbsp;new&nbsp;MySingleton()&#59;&nbsp;&nbsp;<br><br>&nbsp;private&nbsp;MySingleton()&nbsp;{&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;//&nbsp;construct&nbsp;object&nbsp;.&nbsp;.&nbsp;.&nbsp;&nbsp;<br>&nbsp;}&nbsp;&nbsp;<br><br>&nbsp;public&nbsp;static&nbsp;MySingleton&nbsp;getInstance()&nbsp;{&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;return&nbsp;_instance&#59;&nbsp;&nbsp;<br>&nbsp;}&nbsp;&nbsp;<br><br>参考：《Java&nbsp;高效编程指南》<br><br>请问：<br>类中用静态实例作为属性，是什么意思，想不明白，请版主详细解释一下，谢谢！&nbsp;<br><br><br></td></tr>
<tr><td ><hr><small>&nbsp;<a href=http://www.chinaunix.net/forum/profile.php?mode=viewprofile&u=6872 target=_blank>cinc</a> 回复于：2002-09-10 12:07:06</small></td></tr>
<tr><td>这个类的目的：只有一个实例，不允许使用构造方法。<br><br>所以从类的外部看：没有构造方法的。<br>也就是：无法通过&nbsp;new&nbsp;MySingleton()&nbsp;...来获取这个类的一个实例：<br>MySingleton&nbsp;toUse&nbsp;=&nbsp;new&nbsp;MySingleton()&nbsp;//&nbsp;error！！<br><br>所以获取这个类实例的方法&nbsp;getInstance()&nbsp;必须是静态的，这样才能从类（而不是实例）的方法获取他的实例：<br>这是正确的使用方法：<br><br>MySingleton&nbsp;toUse&nbsp;=&nbsp;MySingleton.getInstance()&#59;<br><br>为了在&nbsp;静态方法&nbsp;getInstance()&nbsp;中访问&nbsp;_instance，所以&nbsp;_instance&nbsp;必须是&nbsp;静态的属性。<br><br><br>：）<br><br></td></tr>
<tr><td ><hr><small>&nbsp;<a href=http://www.chinaunix.net/forum/profile.php?mode=viewprofile&u=18970 target=_blank>victorachc</a> 回复于：2002-09-10 12:49:44</small></td></tr>
<tr><td>非常详细，谢谢！<br>看来自己的基础太不扎实了。<br><br></td></tr>

	</table>
</td></tr>	
</table>

<table border="0" width=75%  cellspacing="0" cellpadding="0" >
<tr>
  <td width="100%" height="2" colspan="5" bgcolor="#49ADE9"><img src="/images/bline.gif" width=1 height=1></td> 
</tr>
</table>
<br>
<small>Copyright &copy; ChinaUnix.net  <br>
&nbsp;*&nbsp;  请尊重我们的劳动，转载请注明出自<a href=http://www.chinaunix.net>ChinaUnix．net</a>及作者名　&nbsp;*&nbsp; </small>
</center></div>
</body>
</html>
